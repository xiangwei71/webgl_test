!function(t){var i={};function r(n){if(i[n])return i[n].exports;var e=i[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,r),e.l=!0,e.exports}r.m=t,r.c=i,r.d=function(t,i,n){r.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,i){if(1&i&&(t=r(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var e in t)r.d(n,e,function(i){return t[i]}.bind(null,e));return n},r.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(i,"a",i),i},r.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},r.p="",r(r.s=0)}([function(t,i,r){"use strict";r.r(i);var n=function(){function t(t,i,r){this.x=0,this.y=0,this.z=0,this.x=t,this.y=i,this.z=r}return t.add=function(i,r){return new t(r.x+i.x,r.y+i.y,r.z+i.z)},t.minus=function(i,r){return new t(i.x-r.x,i.y-r.y,i.z-r.z)},t.multiply=function(i,r){return new t(i.x*r,i.y*r,i.z*r)},t.cross_product=function(i,r){return new t(i.y*r.z-i.z*r.y,-i.x*r.z+i.z*r.x,i.x*r.y-i.y*r.x)},t.dot_product=function(t,i){return t.x*i.x+t.y*i.y+t.z*i.z},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(i){return t.add(this,i)},t.prototype.minus=function(i){return t.minus(this,i)},t.prototype.multiply=function(i){return t.multiply(this,i)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),e=function(t,i){this.from=t,this.dir=i};function o(t,i){return Math.abs(t-i)<.001}var u=function(){function t(t,i,r){this.z_axis=n.minus(i,t).normalize();var e=n.up;this.x_axis=n.cross_product(e,this.z_axis).normalize(),this.y_axis=n.cross_product(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=r}return t.prototype.create_ray_dir=function(t,i,r){var n,e=(n=.5*this.fov_degree,Math.PI*n/180),o=Math.tan(e),u=o*r;return this.z_axis.add(this.x_axis.multiply(t*u)).add(this.y_axis.multiply(i*o))},t.prototype.render=function(t,i){var r=this,o=new n(1,0,0).normalize(),u=.5/t.h,s=[{x:0,y:0},{x:u,y:u},{x:-u,y:u},{x:-u,y:-u},{x:u,y:-u}],h=new n(.5,.5,.5);t.render_pixel((function(t,u,a){var c=r.create_ray_dir(t,u,a),p=s.map((function(t){var i=c.add(r.x_axis.multiply(t.x)).add(r.y_axis.multiply(t.y));return new e(r.eye.clone(),i)})).map((function(t){var r,e,u,s=i.map((function(i){return i.hit(t)})).filter((function(t){return t.is_hit})).sort((function(t,i){return t.t-i.t}));if(0!=s.length){var a=s[0].normal,c=(r=-n.dot_product(o,a),e=0,r>(u=1)?u:r<e?e:r);return new n(c,c,c)}return h})),f=s.length;return p.reduce((function(t,i){return t.add(i)}),n.zero).multiply(1/f)}))},t}(),s=function(){function t(t,i,r){this.plane=t,this.w=i,this.h=r}return t.prototype.hit=function(t){var i=this.plane.hit(t);if(i.is_hit){var r=i.hit_pos,e=r.minus(this.plane.C),o=n.cross_product(n.up,this.plane.N).normalize(),u=n.cross_product(o,this.plane.N),s=n.dot_product(e,o),h=n.dot_product(e,u);return{is_hit:Math.abs(s)<this.w&&Math.abs(h)<this.h,hit_pos:r,t:i.t,normal:this.plane.N}}return{is_hit:!1}},t}(),h=function(){function t(t,i){this.C=t,this.N=i}return t.prototype.is_positive=function(t){var i=n.minus(t,this.C);return n.dot_product(i,this.N)>0},t.prototype.hit=function(t){var i=t.from,r=t.dir,e=n.dot_product(r,this.N),u=n.dot_product(n.minus(this.C,i),this.N);if(o(e,0))return{is_hit:!1,hit_pos:null,t:-1};var s=u/e;return{is_hit:s>0,hit_pos:i.add(r.multiply(s)),t:s,normal:this.N}},t}(),a=function(){function t(t,i){this.C=t,this.R=i}return t.prototype.hit=function(t){var i=t.dir,r=t.from,e=n.dot_product(i,i),u=2*(n.dot_product(i,r)-n.dot_product(i,this.C)),s=u*u-4*e*(n.dot_product(r,r)-2*n.dot_product(r,this.C)+n.dot_product(this.C,this.C)-this.R*this.R);if(o(s,0)){var h=-u/(2*e),a=(c=r.add(i.multiply(h))).minus(this.C).normalize();return{is_hit:!0,hit_pos:c,t:h,normal:a}}if(s>0){var c,p=Math.sqrt(s);h=[(-u-p)/(2*e),(-u+p)/(2*e)].filter((function(t){return t>0}))[0],a=(c=r.add(i.multiply(h))).minus(this.C).normalize();return{is_hit:!0,hit_pos:c,t:h,normal:a}}return{is_hit:!1}},t}(),c=function(){function t(t,i){void 0===t&&(t=320),void 0===i&&(i=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=i,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var i=this.backbuffer.getContext("2d"),r=i.getImageData(0,0,this.w,this.h),n=r.data,e=this.w/this.h,o=0;o<this.h;++o)for(var u=0;u<this.w;++u){var s=4*(u+o*this.w),h=u/this.w,a=o/this.h,c=t(2*h-1,2*(a=1-a)-1,e),p=c.x,f=c.y,d=c.z;n[s++]=Math.round(255*p),n[s++]=Math.round(255*f),n[s++]=Math.round(255*d),n[s]=255}i.putImageData(r,0,0)},t.prototype.show_buffer=function(t){var i=document.getElementById(t);i.style.width=this.w+"px",i.style.height=this.h+"px",i.width=i.clientWidth,i.height=i.clientHeight,i.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}();new function(){var t=[new s(new h(n.zero,new n(0,0,-1)),2,2),new a(new n(6,2,0),2)],i=new u(new n(0,10,-10),n.zero,60),r=new c(800,600);i.render(r,t),r.show_buffer("canvas")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,