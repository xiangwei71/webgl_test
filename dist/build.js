!function(t){var i={};function n(e){if(i[e])return i[e].exports;var r=i[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=t,n.c=i,n.d=function(t,i,e){n.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:e})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,i){if(1&i&&(t=n(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(n.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var r in t)n.d(e,r,function(i){return t[i]}.bind(null,r));return e},n.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(i,"a",i),i},n.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},n.p="",n(n.s=0)}([function(t,i,n){"use strict";n.r(i);var e=function(){function t(t,i,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=i,this.z=n}return t.add=function(i,n){return new t(n.x+i.x,n.y+i.y,n.z+i.z)},t.minus=function(i,n){return new t(i.x-n.x,i.y-n.y,i.z-n.z)},t.multiply=function(i,n){return new t(i.x*n,i.y*n,i.z*n)},t.cross_product=function(i,n){return new t(i.y*n.z-i.z*n.y,-i.x*n.z+i.z*n.x,i.x*n.y-i.y*n.x)},t.dot_product=function(t,i){return t.x*i.x+t.y*i.y+t.z*i.z},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(i){return t.add(this,i)},t.prototype.minus=function(i){return t.minus(this,i)},t.prototype.multiply=function(i){return t.multiply(this,i)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),r=function(t,i){this.from=t,this.dir=i};var s=function(){function t(t,i,n){this.z_axis=e.minus(i,t).normalize();var r=e.up;this.x_axis=e.cross_product(r,this.z_axis).normalize(),this.y_axis=e.cross_product(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=n}return t.prototype.create_ray=function(t,i,n){var e,s=(e=.5*this.fov_degree,Math.PI*e/180),o=Math.tan(s),h=o*n,u=this.z_axis.add(this.x_axis.multiply(t*h)).add(this.y_axis.multiply(i*o));return new r(this.eye.clone(),u)},t}(),o=function(){function t(t,i,n){this.plane=t,this.w=i,this.h=n}return t.prototype.hit=function(t){var i=this.plane.hit(t);if(i.is_hit){var n=i.hit_pos,r=n.minus(this.plane.C),s=e.cross_product(e.up,this.plane.N).normalize(),o=e.cross_product(s,this.plane.N),h=e.dot_product(r,s),u=e.dot_product(r,o);return{is_hit:Math.abs(h)<this.w&&Math.abs(u)<this.h,hit_pos:n}}return{is_hit:!1,hit_pos:null}},t}(),h=function(){function t(t,i){this.C=t,this.N=i}return t.prototype.is_positive=function(t){var i=e.minus(t,this.C);return e.dot_product(i,this.N)>0},t.prototype.hit=function(t){var i=t.from,n=t.dir,r=e.dot_product(n,this.N),s=e.dot_product(e.minus(this.C,i),this.N);if(Math.abs(r)<.001)return{is_hit:!1,hit_pos:null};var o=s/r;return{is_hit:o>0,hit_pos:i.add(n.multiply(o))}},t}();new function(){this.w=320,this.h=240,this.backbuffer=null,this.backbuffer=new OffscreenCanvas(this.w,this.h);for(var t=this.backbuffer.getContext("2d"),i=t.getImageData(0,0,this.w,this.h),n=i.data,r=this.w/this.h,u=new s(new e(0,10,-10),e.zero,60),a=new o(new h(e.zero,new e(0,0,-1)),4,2),c=0;c<this.h;++c)for(var p=0;p<this.w;++p){var f=4*(p+c*this.w),d=p/this.w,l=c/this.h,y=2*d-1,_=2*(l=1-l)-1,x=u.create_ray(y,_,r),m=a.hit(x),z=m.is_hit?1:0,w=m.is_hit?1:0;n[f++]=Math.round(255*z),n[f++]=Math.round(255*w),n[f++]=Math.round(0),n[f]=255}t.putImageData(i,0,0);var v=document.getElementById("canvas");v.style.width=this.w+"px",v.style.height=this.h+"px",v.width=v.clientWidth,v.height=v.clientHeight,v.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,