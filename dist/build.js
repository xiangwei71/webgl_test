!function(t){var i={};function r(n){if(i[n])return i[n].exports;var e=i[n]={i:n,l:!1,exports:{}};return t[n].call(e.exports,e,e.exports,r),e.l=!0,e.exports}r.m=t,r.c=i,r.d=function(t,i,n){r.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,i){if(1&i&&(t=r(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var e in t)r.d(n,e,function(i){return t[i]}.bind(null,e));return n},r.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(i,"a",i),i},r.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},r.p="",r(r.s=0)}([function(t,i,r){"use strict";r.r(i);var n=function(){function t(t,i,r){this.x=0,this.y=0,this.z=0,this.x=t,this.y=i,this.z=r}return t.add=function(i,r){return new t(r.x+i.x,r.y+i.y,r.z+i.z)},t.minus=function(i,r){return new t(i.x-r.x,i.y-r.y,i.z-r.z)},t.multiply=function(i,r){return new t(i.x*r,i.y*r,i.z*r)},t.cross_product=function(i,r){return new t(i.y*r.z-i.z*r.y,-i.x*r.z+i.z*r.x,i.x*r.y-i.y*r.x)},t.dot_product=function(t,i){return t.x*i.x+t.y*i.y+t.z*i.z},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(i){return t.add(this,i)},t.prototype.minus=function(i){return t.minus(this,i)},t.prototype.multiply=function(i){return t.multiply(this,i)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),e=function(t,i){this.from=t,this.dir=i};function o(t,i){return Math.abs(t-i)<.001}var s=function(){function t(t,i,r){this.z_axis=n.minus(i,t).normalize();var e=n.up;this.x_axis=n.cross_product(e,this.z_axis).normalize(),this.y_axis=n.cross_product(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=r}return t.prototype.create_ray=function(t,i,r){var n,o=(n=.5*this.fov_degree,Math.PI*n/180),s=Math.tan(o),u=s*r,h=this.z_axis.add(this.x_axis.multiply(t*u)).add(this.y_axis.multiply(i*s));return new e(this.eye.clone(),h)},t.prototype.render=function(t,i){var r=this;t.render_pixel((function(t,e,o){var s=r.create_ray(t,e,o),u=i.map((function(t){return t.hit(s)})).filter((function(t){return t.is_hit})).sort((function(t,i){return t.t-i.t}));if(0!=u.length)var h=u[0],a=h.is_hit?1:0,c=h.is_hit?1:0,p=0;else a=.5,c=.5,p=.5;return new n(a,c,p)}))},t}(),u=function(){function t(t,i,r){this.plane=t,this.w=i,this.h=r}return t.prototype.hit=function(t){var i=this.plane.hit(t);if(i.is_hit){var r=i.hit_pos,e=r.minus(this.plane.C),o=n.cross_product(n.up,this.plane.N).normalize(),s=n.cross_product(o,this.plane.N),u=n.dot_product(e,o),h=n.dot_product(e,s);return{is_hit:Math.abs(u)<this.w&&Math.abs(h)<this.h,hit_pos:r,t:i.t}}return{is_hit:!1}},t}(),h=function(){function t(t,i){this.C=t,this.N=i}return t.prototype.is_positive=function(t){var i=n.minus(t,this.C);return n.dot_product(i,this.N)>0},t.prototype.hit=function(t){var i=t.from,r=t.dir,e=n.dot_product(r,this.N),s=n.dot_product(n.minus(this.C,i),this.N);if(o(e,0))return{is_hit:!1,hit_pos:null,t:-1};var u=s/e;return{is_hit:u>0,hit_pos:i.add(r.multiply(u)),t:u}},t}(),a=function(){function t(t,i){this.C=t,this.R=i}return t.prototype.hit=function(t){var i=t.dir,r=t.from,e=n.dot_product(i,i),s=2*(n.dot_product(i,r)-n.dot_product(i,this.C)),u=s*s-4*e*(n.dot_product(r,r)-2*n.dot_product(r,this.C)+n.dot_product(this.C,this.C)-this.R*this.R);if(o(u,0)){var h=-s/(2*e);return{is_hit:!0,hit_pos:r.add(i.multiply(h)),t:h}}if(u>0){var a=Math.sqrt(u);h=[(-s-a)/(2*e),(-s+a)/(2*e)].filter((function(t){return t>0}))[0];return{is_hit:!0,hit_pos:r.add(i.multiply(h)),t:h}}return{is_hit:!1}},t}(),c=function(){function t(t,i){this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=i,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var i=this.backbuffer.getContext("2d"),r=i.getImageData(0,0,this.w,this.h),n=r.data,e=this.w/this.h,o=0;o<this.h;++o)for(var s=0;s<this.w;++s){var u=4*(s+o*this.w),h=s/this.w,a=o/this.h,c=t(2*h-1,2*(a=1-a)-1,e),p=c.x,f=c.y,d=c.z;n[u++]=Math.round(255*p),n[u++]=Math.round(255*f),n[u++]=Math.round(255*d),n[u]=255}i.putImageData(r,0,0);var l=document.getElementById("canvas");l.style.width=this.w+"px",l.style.height=this.h+"px",l.width=l.clientWidth,l.height=l.clientHeight,l.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}();new function(){var t=[new u(new h(n.zero,new n(0,0,-1)),2,2),new a(new n(6,2,0),2)],i=new s(new n(0,10,-10),n.zero,60),r=new c(320,240);i.render(r,t)}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,