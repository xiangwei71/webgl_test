!function(t){var i={};function n(r){if(i[r])return i[r].exports;var e=i[r]={i:r,l:!1,exports:{}};return t[r].call(e.exports,e,e.exports,n),e.l=!0,e.exports}n.m=t,n.c=i,n.d=function(t,i,r){n.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,i){if(1&i&&(t=n(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var e in t)n.d(r,e,function(i){return t[i]}.bind(null,e));return r},n.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(i,"a",i),i},n.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},n.p="",n(n.s=0)}([function(t,i,n){"use strict";n.r(i);var r=function(){function t(t,i,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=i,this.z=n}return t.add=function(i,n){return new t(n.x+i.x,n.y+i.y,n.z+i.z)},t.minus=function(i,n){return new t(i.x-n.x,i.y-n.y,i.z-n.z)},t.multiply=function(i,n){return new t(i.x*n,i.y*n,i.z*n)},t.cross_product=function(i,n){return new t(i.y*n.z-i.z*n.y,-i.x*n.z+i.z*n.x,i.x*n.y-i.y*n.x)},t.dot_product=function(t,i){return t.x*i.x+t.y*i.y+t.z*i.z},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(i){return t.add(this,i)},t.prototype.minus=function(i){return t.minus(this,i)},t.prototype.multiply=function(i){return t.multiply(this,i)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),e=function(t,i){this.from=t,this.dir=i};function o(t,i){return Math.abs(t-i)<.001}var u=function(){function t(t,i,n){this.z_axis=r.minus(i,t).normalize();var e=r.up;this.x_axis=r.cross_product(e,this.z_axis).normalize(),this.y_axis=r.cross_product(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=n}return t.prototype.create_ray_dir=function(t,i,n){var r,e=(r=.5*this.fov_degree,Math.PI*r/180),o=Math.tan(e),u=o*n;return this.z_axis.add(this.x_axis.multiply(t*u)).add(this.y_axis.multiply(i*o))},t.prototype.render=function(t,i){var n=this,o=new r(1,0,0).normalize(),u=1/t.h,s=.5,h=.5,a=[new r(0,0,0),new r(s,h,0).multiply(u),new r(-h,s,0).multiply(u),new r(-s,-h,0).multiply(u),new r(h,-s,0).multiply(u)],p=new r(.5,.5,.5);t.render_pixel((function(t,u,s){var h=n.create_ray_dir(t,u,s),c=a.map((function(t){var i=h.add(n.x_axis.multiply(t.x)).add(n.y_axis.multiply(t.y));return new e(n.eye.clone(),i)})).map((function(t){var n=i.map((function(i){return i.hit(t)})).filter((function(t){return t.is_hit})).sort((function(t,i){return t.t-i.t}));if(0!=n.length){var e=n[0].normal,u=function(t,i,n){return t>n?n:t<i?i:t}(-r.dot_product(o,e),0,1);return new r(u,u,u)}return p})),f=a.length;return c.reduce((function(t,i){return t.add(i)}),r.zero).multiply(1/f)}))},t}(),s=function(){function t(t,i,n){this.plane=t,this.w=i,this.h=n}return t.prototype.hit=function(t){var i=this.plane.hit(t);if(i.is_hit){var n=i.hit_pos,e=n.minus(this.plane.C),o=r.cross_product(r.up,this.plane.N).normalize(),u=r.cross_product(o,this.plane.N),s=r.dot_product(e,o),h=r.dot_product(e,u);return{is_hit:Math.abs(s)<this.w&&Math.abs(h)<this.h,hit_pos:n,t:i.t,normal:this.plane.N}}return{is_hit:!1}},t}(),h=function(){function t(t,i){this.C=t,this.N=i}return t.prototype.is_positive=function(t){var i=r.minus(t,this.C);return r.dot_product(i,this.N)>0},t.prototype.hit=function(t){var i=t.from,n=t.dir,e=r.dot_product(n,this.N),u=r.dot_product(r.minus(this.C,i),this.N);if(o(e,0))return{is_hit:!1,hit_pos:null,t:-1};var s=u/e;return{is_hit:s>0,hit_pos:i.add(n.multiply(s)),t:s,normal:this.N}},t}(),a=function(){function t(t,i){this.C=t,this.R=i}return t.prototype.hit=function(t){var i=t.dir,n=t.from,e=r.dot_product(i,i),u=2*(r.dot_product(i,n)-r.dot_product(i,this.C)),s=u*u-4*e*(r.dot_product(n,n)-2*r.dot_product(n,this.C)+r.dot_product(this.C,this.C)-this.R*this.R);if(o(s,0)){var h=-u/(2*e),a=(p=n.add(i.multiply(h))).minus(this.C).normalize();return{is_hit:!0,hit_pos:p,t:h,normal:a}}if(s>0){var p,c=Math.sqrt(s);h=[(-u-c)/(2*e),(-u+c)/(2*e)].filter((function(t){return t>0}))[0],a=(p=n.add(i.multiply(h))).minus(this.C).normalize();return{is_hit:!0,hit_pos:p,t:h,normal:a}}return{is_hit:!1}},t}(),p=function(){function t(t,i){void 0===t&&(t=320),void 0===i&&(i=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=i,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var i=this.backbuffer.getContext("2d"),n=i.getImageData(0,0,this.w,this.h),r=n.data,e=this.w/this.h,o=0;o<this.h;++o)for(var u=0;u<this.w;++u){var s=4*(u+o*this.w),h=u/this.w,a=o/this.h,p=t(2*h-1,2*(a=1-a)-1,e),c=p.x,f=p.y,d=p.z;r[s++]=Math.round(255*c),r[s++]=Math.round(255*f),r[s++]=Math.round(255*d),r[s]=255}i.putImageData(n,0,0)},t.prototype.show_buffer=function(t){var i=document.getElementById(t);i.style.width=this.w+"px",i.style.height=this.h+"px",i.width=i.clientWidth,i.height=i.clientHeight,i.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}();new function(){var t=[new s(new h(r.zero,new r(0,0,-1)),2,2),new a(new r(6,2,0),2)],i=new u(new r(0,10,-10),r.zero,60),n=new p(800,600);i.render(n,t),n.show_buffer("canvas")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,