!function(t){var n={};function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=n,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)i.d(e,r,function(n){return t[n]}.bind(null,r));return e},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},i.p="",i(i.s=0)}([function(t,n,i){"use strict";i.r(n);var e=function(t,n){this.from=t,this.dir=n};function r(t,n){return Math.abs(t-n)<.001}function o(t,n){return t.map((function(t){return t.h.hit(n,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,n){return t.t-n.t}))}var u=function(){function t(t,n,i){this.x=0,this.y=0,this.z=0,this.x=t,this.y=n,this.z=i}return t.reflect=function(n,i){var e=-2*t.dot(n,i);return i.multiply(e).add(n)},t.add=function(n,i){return new t(i.x+n.x,i.y+n.y,i.z+n.z)},t.minus=function(n,i){return new t(n.x-i.x,n.y-i.y,n.z-i.z)},t.multiply=function(n,i){return new t(n.x*i,n.y*i,n.z*i)},t.multiply3=function(n,i){return new t(n.x*i.x,n.y*i.y,n.z*i.z)},t.cross=function(n,i){return new t(n.y*i.z-n.z*i.y,-n.x*i.z+n.z*i.x,n.x*i.y-n.y*i.x)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.equal=function(t,n){return r(t.x,n.x)&&r(t.y,n.y)&&r(t.z,n.z)},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(n){return t.add(this,n)},t.prototype.minus=function(n){return t.minus(this,n)},t.prototype.multiply=function(n){return t.multiply(this,n)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),s=function(){function t(t){this.color=t}return t.prototype.shading=function(t,n,i,r){var s,h,a,l=t.normal,f=(s=-u.dot(n,l),h=0,s>(a=1)?a:s<h?h:s),p=function(t,n,i){var r=n.negative(),u=t.hit_pos.add(r.multiply(.001));return 0!=o(i,new e(u,r)).length?.45:1}(t,n,i);return this.color.multiply(f).multiply(p)},t.yellow=new t(new u(1,1,0)),t.red=new t(new u(1,0,0)),t.green=new t(new u(0,1,0)),t.blue=new t(new u(0,0,1)),t.gray=new t(new u(.5,.5,.5)),t.white=new t(new u(1,1,1)),t}(),h=function(){function t(t,n,i){this.z_axis=u.minus(n,t).normalize();var e=u.up;this.x_axis=u.cross(e,this.z_axis).normalize(),this.y_axis=u.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i}return t.prototype.create_ray_dir=function(t,n,i){var e,r=(e=.5*this.fov_degree,Math.PI*e/180),o=Math.tan(r),u=o*i;return this.z_axis.add(this.x_axis.multiply(t*u)).add(this.y_axis.multiply(n*o))},t.prototype.render=function(t,n){var i=this,r=new u(1,-1,0).normalize(),h=.5/t.h,a=[{x:0,y:0},{x:h,y:h},{x:-h,y:h},{x:-h,y:-h},{x:h,y:-h}];t.render_pixel((function(t,h,l){var f=i.create_ray_dir(t,h,l),p=a.map((function(t){var n=f.add(i.x_axis.multiply(t.x)).add(i.y_axis.multiply(t.y));return new e(i.eye,n.normalize())})).map((function(t){var i=o(n,t);if(0!=i.length){var e=i[0];return e.s.shading(e,r,n,1)}return s.gray.color})),c=a.length;return p.reduce((function(t,n){return t.add(n)}),u.zero).multiply(1/c)}))},t}(),a=function(){function t(t,n,i){this.plane=t,this.w=n,this.h=i}return t.prototype.hit=function(t,n){var i=this.plane.hit(t,n);if(i.is_hit){var e=i.hit_pos,r=e.minus(this.plane.C),o=u.equal(this.plane.N,u.up)?new u(1,0,0):u.up,s=u.cross(o,this.plane.N).normalize(),h=u.cross(s,this.plane.N),a=u.dot(r,s),l=u.dot(r,h);return{is_hit:Math.abs(a)<this.w&&Math.abs(l)<this.h,hit_pos:e,i:t.dir,t:i.t,normal:this.plane.N,s:n}}return{is_hit:!1}},t}(),l=function(){function t(t,n){this.C=t,this.N=n}return t.prototype.is_positive=function(t){var n=u.minus(t,this.C);return u.dot(n,this.N)>0},t.prototype.hit=function(t,n){var i=t.from,e=t.dir,o=u.dot(e,this.N),s=u.dot(u.minus(this.C,i),this.N);if(r(o,0))return{is_hit:!1,hit_pos:null,t:-1};var h=s/o;return{is_hit:h>0,hit_pos:i.add(e.multiply(h)),i:e,t:h,normal:this.N,s:n}},t}(),f=function(){function t(t,n){this.C=t,this.R=n}return t.prototype.hit=function(t,n){var i=t.dir,e=t.from,o=u.dot(i,i),s=2*(u.dot(i,e)-u.dot(i,this.C)),h=s*s-4*o*(u.dot(e,e)-2*u.dot(e,this.C)+u.dot(this.C,this.C)-this.R*this.R);if(r(h,0)){if((c=-s/(2*o))<0)return{is_hit:!1};var a=(p=e.add(i.multiply(c))).minus(this.C).normalize();return{is_hit:!0,hit_pos:p,i:i,t:c,normal:a,s:n}}if(h>0){var l=Math.sqrt(h),f=[(-s-l)/(2*o),(-s+l)/(2*o)].filter((function(t){return t>0}));if(0==f.length)return{is_hit:!1};var p,c=f[0];a=(p=e.add(i.multiply(c))).minus(this.C).normalize();return{is_hit:!0,hit_pos:p,i:i,t:c,normal:a,s:n}}return{is_hit:!1}},t}(),p=function(){function t(t,n){void 0===t&&(t=320),void 0===n&&(n=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=n,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var n=this.backbuffer.getContext("2d"),i=n.getImageData(0,0,this.w,this.h),e=i.data,r=this.w/this.h,o=0;o<this.h;++o)for(var u=0;u<this.w;++u){var s=4*(u+o*this.w),h=(u+.5)/this.w,a=(o+.5)/this.h,l=t(2*h-1,2*(a=1-a)-1,r),f=l.x,p=l.y,c=l.z;f=Math.pow(f,1/2.1),p=Math.pow(p,1/2.1),c=Math.pow(c,1/2.1),e[s++]=Math.round(255*f),e[s++]=Math.round(255*p),e[s++]=Math.round(255*c),e[s]=255}n.putImageData(i,0,0)},t.prototype.show_buffer=function(t){var n=document.getElementById(t);n.style.width=this.w+"px",n.style.height=this.h+"px",n.width=n.clientWidth,n.height=n.clientHeight,n.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),c=function(t,n){this.s=t,this.h=n},y=function(){function t(){}return t.prototype.shading=function(t,n,i,r){if(r>20)return console.log("超過上限"),s.green.color;var h=t.normal,a=t.i,l=u.reflect(a,h),f=t.hit_pos.add(l.multiply(.001)),p=o(i,new e(f,l)),c=new u(1,1,1);if(0!=p.length){var y=p[0],d=y.s.shading(y,n,i,++r);return u.multiply3(c,d.multiply(.9))}return u.multiply3(c,s.gray.color.multiply(.9))},t}();new function(){var t=[new c(s.white,new a(new l(u.zero,u.up),16,16))];t.push(new c(s.yellow,new f(new u(6,2,-8),2))),t.push(new c(s.green,new f(new u(-6,2,-8),2))),t.push(new c(s.blue,new f(new u(0,2,-12),2))),t.push(new c(s.yellow,new f(new u(-10,6,0),6))),t.push(new c(new y,new f(new u(0,2,-2),2))),t.push(new c(new y,new f(new u(12,4,-6),4))),t.push(new c(new y,new f(new u(8,4,2),4)));var n=new h(new u(0,20,-20),u.zero,60),i=new p(800,600);n.render(i,t),i.show_buffer("canvas")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,