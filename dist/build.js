!function(t){var i={};function n(r){if(i[r])return i[r].exports;var e=i[r]={i:r,l:!1,exports:{}};return t[r].call(e.exports,e,e.exports,n),e.l=!0,e.exports}n.m=t,n.c=i,n.d=function(t,i,r){n.o(t,i)||Object.defineProperty(t,i,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,i){if(1&i&&(t=n(t)),8&i)return t;if(4&i&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var e in t)n.d(r,e,function(i){return t[i]}.bind(null,e));return r},n.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(i,"a",i),i},n.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},n.p="",n(n.s=0)}([function(t,i,n){"use strict";n.r(i);function r(t,i){return Math.abs(t-i)<.001}var e=function(){function t(t,i,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=i,this.z=n}return t.add=function(i,n){return new t(n.x+i.x,n.y+i.y,n.z+i.z)},t.minus=function(i,n){return new t(i.x-n.x,i.y-n.y,i.z-n.z)},t.multiply=function(i,n){return new t(i.x*n,i.y*n,i.z*n)},t.cross=function(i,n){return new t(i.y*n.z-i.z*n.y,-i.x*n.z+i.z*n.x,i.x*n.y-i.y*n.x)},t.dot=function(t,i){return t.x*i.x+t.y*i.y+t.z*i.z},t.equal=function(t,i){return r(t.x,i.x)&&r(t.y,i.y)&&r(t.z,i.z)},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(i){return t.add(this,i)},t.prototype.minus=function(i){return t.minus(this,i)},t.prototype.multiply=function(i){return t.multiply(this,i)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),o=function(t,i){this.from=t,this.dir=i},s=function(){function t(t,i,n){this.z_axis=e.minus(i,t).normalize();var r=e.up;this.x_axis=e.cross(r,this.z_axis).normalize(),this.y_axis=e.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=n}return t.prototype.create_ray_dir=function(t,i,n){var r,e=(r=.5*this.fov_degree,Math.PI*r/180),o=Math.tan(e),s=o*n;return this.z_axis.add(this.x_axis.multiply(t*s)).add(this.y_axis.multiply(i*o))},t.prototype.render=function(t,i){var n=this,r=new e(1,-1,0).normalize(),s=.5/t.h,u=[{x:0,y:0},{x:s,y:s},{x:-s,y:s},{x:-s,y:-s},{x:s,y:-s}],h=new e(.5,.5,.5);t.render_pixel((function(t,s,a){var f=n.create_ray_dir(t,s,a),l=u.map((function(t){var i=f.add(n.x_axis.multiply(t.x)).add(n.y_axis.multiply(t.y));return new o(n.eye,i)})).map((function(t){var n,o,s,u=i.map((function(i){return i.hit(t)})).filter((function(t){return t.is_hit})).sort((function(t,i){return t.t-i.t}));if(0!=u.length){var a=u[0].normal,f=(n=-e.dot(r,a),o=0,n>(s=1)?s:n<o?o:n);return new e(f,f,f)}return h})),p=u.length;return l.reduce((function(t,i){return t.add(i)}),e.zero).multiply(1/p)}))},t}(),u=function(){function t(t,i,n){this.plane=t,this.w=i,this.h=n}return t.prototype.hit=function(t){var i=this.plane.hit(t);if(i.is_hit){var n=i.hit_pos,r=n.minus(this.plane.C),o=e.equal(this.plane.N,e.up)?new e(1,0,0):e.up,s=e.cross(o,this.plane.N).normalize(),u=e.cross(s,this.plane.N),h=e.dot(r,s),a=e.dot(r,u);return{is_hit:Math.abs(h)<this.w&&Math.abs(a)<this.h,hit_pos:n,t:i.t,normal:this.plane.N}}return{is_hit:!1}},t}(),h=function(){function t(t,i){this.C=t,this.N=i}return t.prototype.is_positive=function(t){var i=e.minus(t,this.C);return e.dot(i,this.N)>0},t.prototype.hit=function(t){var i=t.from,n=t.dir,o=e.dot(n,this.N),s=e.dot(e.minus(this.C,i),this.N);if(r(o,0))return{is_hit:!1,hit_pos:null,t:-1};var u=s/o;return{is_hit:u>0,hit_pos:i.add(n.multiply(u)),t:u,normal:this.N}},t}(),a=function(){function t(t,i){this.C=t,this.R=i}return t.prototype.hit=function(t){var i=t.dir,n=t.from,o=e.dot(i,i),s=2*(e.dot(i,n)-e.dot(i,this.C)),u=s*s-4*o*(e.dot(n,n)-2*e.dot(n,this.C)+e.dot(this.C,this.C)-this.R*this.R);if(r(u,0)){var h=-s/(2*o),a=(f=n.add(i.multiply(h))).minus(this.C).normalize();return{is_hit:!0,hit_pos:f,t:h,normal:a}}if(u>0){var f,l=Math.sqrt(u);h=[(-s-l)/(2*o),(-s+l)/(2*o)].filter((function(t){return t>0}))[0],a=(f=n.add(i.multiply(h))).minus(this.C).normalize();return{is_hit:!0,hit_pos:f,t:h,normal:a}}return{is_hit:!1}},t}(),f=function(){function t(t,i){void 0===t&&(t=320),void 0===i&&(i=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=i,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var i=this.backbuffer.getContext("2d"),n=i.getImageData(0,0,this.w,this.h),r=n.data,e=this.w/this.h,o=0;o<this.h;++o)for(var s=0;s<this.w;++s){var u=4*(s+o*this.w),h=s/this.w,a=o/this.h,f=t(2*h-1,2*(a=1-a)-1,e),l=f.x,p=f.y,c=f.z;r[u++]=Math.round(255*l),r[u++]=Math.round(255*p),r[u++]=Math.round(255*c),r[u]=255}i.putImageData(n,0,0)},t.prototype.show_buffer=function(t){var i=document.getElementById(t);i.style.width=this.w+"px",i.style.height=this.h+"px",i.width=i.clientWidth,i.height=i.clientHeight,i.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}();new function(){var t=[new u(new h(e.zero,e.up),16,16),new a(new e(6,2,0),2)],i=new s(new e(0,20,-20),e.zero,60),n=new f(800,600);i.render(n,t),n.show_buffer("canvas")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,