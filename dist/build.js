!function(t){var n={};function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=n,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)i.d(e,r,function(n){return t[n]}.bind(null,r));return e},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},i.p="",i(i.s=0)}([function(t,n,i){"use strict";i.r(n);function e(t,n){return Math.abs(t-n)<.001}function r(t,n){return t.map((function(t){return t.h.hit(n,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,n){return t.t-n.t}))}var o=function(){function t(t,n,i){this.x=0,this.y=0,this.z=0,this.x=t,this.y=n,this.z=i}return t.reflect=function(n,i){var e=-2*t.dot(n,i);return i.multiply(e).add(n)},t.add=function(n,i){return new t(i.x+n.x,i.y+n.y,i.z+n.z)},t.minus=function(n,i){return new t(n.x-i.x,n.y-i.y,n.z-i.z)},t.multiply=function(n,i){return new t(n.x*i,n.y*i,n.z*i)},t.multiply3=function(n,i){return new t(n.x*i.x,n.y*i.y,n.z*i.z)},t.cross=function(n,i){return new t(n.y*i.z-n.z*i.y,-n.x*i.z+n.z*i.x,n.x*i.y-n.y*i.x)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.equal=function(t,n){return e(t.x,n.x)&&e(t.y,n.y)&&e(t.z,n.z)},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(n){return t.add(this,n)},t.prototype.minus=function(n){return t.minus(this,n)},t.prototype.multiply=function(n){return t.multiply(this,n)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),u=function(t,n){this.from=t,this.dir=n},s=function(){function t(t){this.color=t}return t.prototype.shading=function(t,n,i,e){var r,u,s,h=t.normal,a=(r=-o.dot(n,h),u=0,r>(s=1)?s:r<u?u:r);return this.color.multiply(a)},t.yellow=new t(new o(1,1,0)),t.red=new t(new o(1,0,0)),t.green=new t(new o(0,1,0)),t.blue=new t(new o(0,0,1)),t.gray=new t(new o(.5,.5,.5)),t.white=new t(new o(1,1,1)),t}(),h=function(){function t(t,n,i){this.z_axis=o.minus(n,t).normalize();var e=o.up;this.x_axis=o.cross(e,this.z_axis).normalize(),this.y_axis=o.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i}return t.prototype.create_ray_dir=function(t,n,i){var e,r=(e=.5*this.fov_degree,Math.PI*e/180),o=Math.tan(r),u=o*i;return this.z_axis.add(this.x_axis.multiply(t*u)).add(this.y_axis.multiply(n*o))},t.prototype.render=function(t,n){var i=this,e=new o(1,-1,0).normalize(),h=.5/t.h,a=[{x:0,y:0},{x:h,y:h},{x:-h,y:h},{x:-h,y:-h},{x:h,y:-h}];t.render_pixel((function(t,h,l){var f=i.create_ray_dir(t,h,l),p=a.map((function(t){var n=f.add(i.x_axis.multiply(t.x)).add(i.y_axis.multiply(t.y));return new u(i.eye,n.normalize())})).map((function(t){var i=r(n,t);if(0!=i.length){var o=i[0];return o.s.shading(o,e,n,1)}return s.gray.color})),c=a.length;return p.reduce((function(t,n){return t.add(n)}),o.zero).multiply(1/c)}))},t}(),a=function(){function t(t,n,i){this.plane=t,this.w=n,this.h=i}return t.prototype.hit=function(t,n){var i=this.plane.hit(t,n);if(i.is_hit){var e=i.hit_pos,r=e.minus(this.plane.C),u=o.equal(this.plane.N,o.up)?new o(1,0,0):o.up,s=o.cross(u,this.plane.N).normalize(),h=o.cross(s,this.plane.N),a=o.dot(r,s),l=o.dot(r,h);return{is_hit:Math.abs(a)<this.w&&Math.abs(l)<this.h,hit_pos:e,i:t.dir,t:i.t,normal:this.plane.N,s:n}}return{is_hit:!1}},t}(),l=function(){function t(t,n){this.C=t,this.N=n}return t.prototype.is_positive=function(t){var n=o.minus(t,this.C);return o.dot(n,this.N)>0},t.prototype.hit=function(t,n){var i=t.from,r=t.dir,u=o.dot(r,this.N),s=o.dot(o.minus(this.C,i),this.N);if(e(u,0))return{is_hit:!1,hit_pos:null,t:-1};var h=s/u;return{is_hit:h>0,hit_pos:i.add(r.multiply(h)),i:r,t:h,normal:this.N,s:n}},t}(),f=function(){function t(t,n){this.C=t,this.R=n}return t.prototype.hit=function(t,n){var i=t.dir,r=t.from,u=o.dot(i,i),s=2*(o.dot(i,r)-o.dot(i,this.C)),h=s*s-4*u*(o.dot(r,r)-2*o.dot(r,this.C)+o.dot(this.C,this.C)-this.R*this.R);if(e(h,0)){if((c=-s/(2*u))<0)return{is_hit:!1};var a=(p=r.add(i.multiply(c))).minus(this.C).normalize();return{is_hit:!0,hit_pos:p,i:i,t:c,normal:a,s:n}}if(h>0){var l=Math.sqrt(h),f=[(-s-l)/(2*u),(-s+l)/(2*u)].filter((function(t){return t>0}));if(0==f.length)return{is_hit:!1};var p,c=f[0];a=(p=r.add(i.multiply(c))).minus(this.C).normalize();return{is_hit:!0,hit_pos:p,i:i,t:c,normal:a,s:n}}return{is_hit:!1}},t}(),p=function(){function t(t,n){void 0===t&&(t=320),void 0===n&&(n=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=n,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var n=this.backbuffer.getContext("2d"),i=n.getImageData(0,0,this.w,this.h),e=i.data,r=this.w/this.h,o=0;o<this.h;++o)for(var u=0;u<this.w;++u){var s=4*(u+o*this.w),h=u/this.w,a=o/this.h,l=t(2*h-1,2*(a=1-a)-1,r),f=l.x,p=l.y,c=l.z;f=Math.pow(f,1/2.1),p=Math.pow(p,1/2.1),c=Math.pow(c,1/2.1),e[s++]=Math.round(255*f),e[s++]=Math.round(255*p),e[s++]=Math.round(255*c),e[s]=255}n.putImageData(i,0,0)},t.prototype.show_buffer=function(t){var n=document.getElementById(t);n.style.width=this.w+"px",n.style.height=this.h+"px",n.width=n.clientWidth,n.height=n.clientHeight,n.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),c=function(t,n){this.s=t,this.h=n},y=function(){function t(){}return t.prototype.shading=function(t,n,i,e){if(e>20)return console.log("超過上限"),s.green.color;var h=t.normal,a=t.i,l=o.reflect(a,h),f=t.hit_pos.add(l.multiply(.001)),p=r(i,new u(f,l)),c=new o(1,1,1);if(0!=p.length){var y=p[0],d=y.s.shading(y,n,i,++e);return o.multiply3(c,d.multiply(.9))}return o.multiply3(c,s.gray.color.multiply(.9))},t}();new function(){var t=[new c(s.white,new a(new l(o.zero,o.up),16,16))];t.push(new c(s.yellow,new f(new o(6,2,-8),2))),t.push(new c(s.green,new f(new o(-6,2,-8),2))),t.push(new c(s.blue,new f(new o(0,2,-12),2))),t.push(new c(new y,new f(new o(0,4,-6),4))),t.push(new c(new y,new f(new o(12,4,-6),4))),t.push(new c(new y,new f(new o(8,4,2),4)));var n=new h(new o(0,20,-20),o.zero,60),i=new p(800,600);n.render(i,t),i.show_buffer("canvas")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,