!function(t){var n={};function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.m=t,i.c=n,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)i.d(e,r,function(n){return t[n]}.bind(null,r));return e},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},i.p="",i(i.s=0)}([function(t,n,i){"use strict";i.r(n);function e(t,n){return Math.abs(t-n)<.001}var r=function(){function t(t,n,i){this.x=0,this.y=0,this.z=0,this.x=t,this.y=n,this.z=i}return t.add=function(n,i){return new t(i.x+n.x,i.y+n.y,i.z+n.z)},t.minus=function(n,i){return new t(n.x-i.x,n.y-i.y,n.z-i.z)},t.multiply=function(n,i){return new t(n.x*i,n.y*i,n.z*i)},t.cross=function(n,i){return new t(n.y*i.z-n.z*i.y,-n.x*i.z+n.z*i.x,n.x*i.y-n.y*i.x)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.equal=function(t,n){return e(t.x,n.x)&&e(t.y,n.y)&&e(t.z,n.z)},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(n){return t.add(this,n)},t.prototype.minus=function(n){return t.minus(this,n)},t.prototype.multiply=function(n){return t.multiply(this,n)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),o=function(t,n){this.from=t,this.dir=n},s=function(){function t(t){this.color=t}return t.yellow=new t(new r(1,1,0)),t.red=new t(new r(1,0,0)),t.green=new t(new r(0,1,0)),t.blue=new t(new r(0,0,1)),t.gray=new t(new r(.5,.5,.5)),t.white=new t(new r(1,1,1)),t}(),u=function(){function t(t,n,i){this.z_axis=r.minus(n,t).normalize();var e=r.up;this.x_axis=r.cross(e,this.z_axis).normalize(),this.y_axis=r.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i}return t.prototype.create_ray_dir=function(t,n,i){var e,r=(e=.5*this.fov_degree,Math.PI*e/180),o=Math.tan(r),s=o*i;return this.z_axis.add(this.x_axis.multiply(t*s)).add(this.y_axis.multiply(n*o))},t.prototype.render=function(t,n){var i=this,e=new r(1,-1,0).normalize(),u=.5/t.h,h=[{x:0,y:0},{x:u,y:u},{x:-u,y:u},{x:-u,y:-u},{x:u,y:-u}];t.render_pixel((function(t,u,a){var f=i.create_ray_dir(t,u,a),l=h.map((function(t){var n=f.add(i.x_axis.multiply(t.x)).add(i.y_axis.multiply(t.y));return new o(i.eye,n)})).map((function(t){var i,o,u,h=n.map((function(n){return n.h.hit(t,n.m)})).filter((function(t){return t.is_hit})).sort((function(t,n){return t.t-n.t}));if(0!=h.length){var a=h[0],f=a.normal,l=(i=-r.dot(e,f),o=0,i>(u=1)?u:i<o?o:i);return a.m.color.multiply(l)}return s.gray.color})),c=h.length;return l.reduce((function(t,n){return t.add(n)}),r.zero).multiply(1/c)}))},t}(),h=function(){function t(t,n,i){this.plane=t,this.w=n,this.h=i}return t.prototype.hit=function(t,n){var i=this.plane.hit(t,n);if(i.is_hit){var e=i.hit_pos,o=e.minus(this.plane.C),s=r.equal(this.plane.N,r.up)?new r(1,0,0):r.up,u=r.cross(s,this.plane.N).normalize(),h=r.cross(u,this.plane.N),a=r.dot(o,u),f=r.dot(o,h);return{is_hit:Math.abs(a)<this.w&&Math.abs(f)<this.h,hit_pos:e,t:i.t,normal:this.plane.N,m:n}}return{is_hit:!1}},t}(),a=function(){function t(t,n){this.C=t,this.N=n}return t.prototype.is_positive=function(t){var n=r.minus(t,this.C);return r.dot(n,this.N)>0},t.prototype.hit=function(t,n){var i=t.from,o=t.dir,s=r.dot(o,this.N),u=r.dot(r.minus(this.C,i),this.N);if(e(s,0))return{is_hit:!1,hit_pos:null,t:-1};var h=u/s;return{is_hit:h>0,hit_pos:i.add(o.multiply(h)),t:h,normal:this.N,m:n}},t}(),f=function(){function t(t,n){this.C=t,this.R=n}return t.prototype.hit=function(t,n){var i=t.dir,o=t.from,s=r.dot(i,i),u=2*(r.dot(i,o)-r.dot(i,this.C)),h=u*u-4*s*(r.dot(o,o)-2*r.dot(o,this.C)+r.dot(this.C,this.C)-this.R*this.R);if(e(h,0)){var a=-u/(2*s),f=(l=o.add(i.multiply(a))).minus(this.C).normalize();return{is_hit:!0,hit_pos:l,t:a,normal:f,m:n}}if(h>0){var l,c=Math.sqrt(h);a=[(-u-c)/(2*s),(-u+c)/(2*s)].filter((function(t){return t>0}))[0],f=(l=o.add(i.multiply(a))).minus(this.C).normalize();return{is_hit:!0,hit_pos:l,t:a,normal:f,m:n}}return{is_hit:!1}},t}(),l=function(){function t(t,n){void 0===t&&(t=320),void 0===n&&(n=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=n,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var n=this.backbuffer.getContext("2d"),i=n.getImageData(0,0,this.w,this.h),e=i.data,r=this.w/this.h,o=0;o<this.h;++o)for(var s=0;s<this.w;++s){var u=4*(s+o*this.w),h=s/this.w,a=o/this.h,f=t(2*h-1,2*(a=1-a)-1,r),l=f.x,c=f.y,p=f.z;e[u++]=Math.round(255*l),e[u++]=Math.round(255*c),e[u++]=Math.round(255*p),e[u]=255}n.putImageData(i,0,0)},t.prototype.show_buffer=function(t){var n=document.getElementById(t);n.style.width=this.w+"px",n.style.height=this.h+"px",n.width=n.clientWidth,n.height=n.clientHeight,n.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),c=function(t,n){this.m=t,this.h=n};new function(){var t=[new c(s.white,new h(new a(r.zero,r.up),16,16))];t.push(new c(s.green,new f(new r(6,2,-8),1))),t.push(new c(s.yellow,new f(new r(0,4,-6),4)));var n=new u(new r(0,20,-20),r.zero,60),i=new l(800,600);n.render(i,t),i.show_buffer("canvas")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,